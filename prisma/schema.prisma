generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password        String
  is_suspended    Boolean?   @default(false)
  is_deleted      Boolean?   @default(false)
  is_new_user     Boolean?   @default(true)
  created_on      DateTime   @default(dbgenerated("CURRENT_DATE")) @db.Date
  last_updated_on DateTime   @default(dbgenerated("CURRENT_DATE")) @db.Date
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
// model company {
//   id             String     @id @db.Uuid
//   name           String
//   street_address String?
//   state          String?
//   zipcode        String?
//   apt_no         String?    @map("apt no")
//   country        String?
//   partners       partners[]
// }

// model partners {
//   partnership_id String   @id @db.Uuid
//   user_id        String   @db.Uuid
//   company_id     String?  @db.Uuid
//   company        company? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_id_fk")
//   user           user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fk")
// }

// model user {
//   user_id         String     @id @db.Uuid
//   first_name      String
//   last_name       String
//   email           String     @unique
//   password        String
//   is_suspended    Boolean?   @default(false)
//   is_deleted      Boolean?   @default(false)
//   is_new_user     Boolean?   @default(true)
//   created_on      DateTime   @default(dbgenerated("CURRENT_DATE")) @db.Date
//   last_updated_on DateTime   @default(dbgenerated("CURRENT_DATE")) @db.Date
//   partners        partners[]
// }
